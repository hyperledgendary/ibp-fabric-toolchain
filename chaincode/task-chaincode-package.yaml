---
# Build task to build the codebase
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: package-chaincode
spec:
  params:
    - name: label
    - name: type
    - name: dir-to-package
  results:
    - name: filename-package
      description: filename of the package
  workspaces:
    - name: code
      mountPath: /artifacts
  steps:
    - name: pkgcc
      image: ibmcom/pipeline-base-image:2.6
      env:
        - name: file
          value: $(params.dir-to-package)
        - name: label
          value: $(params.label)
        - name: type
          value: $(params.type)
      workingDir: /artifacts
      command: ["/bin/bash", "-c"]
      args:
        - |
          #!/bin/bash
          set -exuo pipefail

          function error_exit {
              echo "${1:-"Unknown Error"}" 1>&2
              exit 1
          }

          : ${file}
          : ${label}
          : ${type}

          filename=$(basename "$file")
          if [ "$type" = "external" ] && [ ! "$filename" = "connection.json" ]; then
              error_exit "Invalid chaincode file $file: external chaincode requires a connection.json file"
          elif [ "$type" = "prebuilt" ] && [ ! "$filename" = "prebuilt.tgz" ]; then
              # TODO check file contains a start.sh script?
              error_exit "Invalid chaincode file $file: prebuilt chaincode must be in a prebuilt.tgz file"
          fi

          if [ ! -d "$file" ] && [ ! -f "$file" ]; then
              error_exit "Cannot find file $file"
          fi

          prefix=$(basename "$0")
          tempdir=$(mktemp -d -t "$prefix.XXXXXXXX") || error_exit "Error creating temporary directory"

          if [ -n "$DEBUG" ]; then
              echo "label = $label"
              echo "type = $type"
              echo "file = $file"
              echo "tempdir = $tempdir"
          fi

          mkdir -p "$tempdir/src"
          if [ -d "$file" ]; then
              cp -a "$file/"* "$tempdir/src/"
          elif [ -f "$file" ]; then
              cp -a "$file" "$tempdir/src/"
          fi

          mkdir -p "$tempdir/pkg"
          cat << METADATA-EOF > "$tempdir/pkg/metadata.json"
          {
              "type": "$type",
              "label": "$label"
          }
          METADATA-EOF

          if [ "$type" = "external" ] || [ "$type" = "prebuilt" ]; then
              tar -C "$tempdir/src" -czf "$tempdir/pkg/code.tar.gz" .
          else
              tar -C "$tempdir" -czf "$tempdir/pkg/code.tar.gz" src 
          fi

          tar -C "$tempdir/pkg" -czf "$label.tgz" metadata.json code.tar.gz

          # store the filename
          echo "$label.tgz" > $(results.filename-package)

          rm -Rf "$tempdir"


