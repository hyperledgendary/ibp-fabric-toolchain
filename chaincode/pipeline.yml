---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: ibp-fabric-pipeline
spec:
  params:
    - name: repository
      description: the git repo containing source code. If empty, the repository url will be found from toolchain
      default: ""
    - name: branch
      description: the branch for the git repo
      default: "master"
    - name: revision
      description: the git revision/commit for the git repo
      default: ""
    - name: fail-on-lint-errors
      description: force failure of task when docker lint errors are found
      default: "true"
    - name: fail-on-scanned-issues
      description: force failure of task when vulnerability advisor scan issues are found
      default: "true"
    - name: path-to-context
      default: "."
    - name: path-to-dockerfile
      default: "."
    - name: dockerfile
      default: "Dockerfile"
    - name: build-args
      description: ibmcloud cr build argument list in the format 'KEY=VALUE' with a key-value pair per line.
      default: ""
    - name: registry-region
      description: The IBM Cloud region for image registry
    - name: registry-namespace
      description: container registry namespace
    - name: registry-create-namespace
      description: create container registry namespace if it doesn't already exists
      default: "true"
    - name: app-name
      description: application name
    - name: image-name
      description: image name
    - name: deployment-file
      description: file containing the kubernetes deployment definition
      default: "deployment.yml"
    - name: keep-ingress-custom-domain
      description: force keep of ingress custom domain in deployment-file if any (true|false)
      default: "false"
    - name: dev-region
    - name: dev-resource-group
    - name: cluster-name
      description: the name of the cluster to target
    - name: dev-cluster-namespace
      description: the namespace
    - name: pipeline-debug
      default: "0"
  workspaces:
    - name: pipeline-ws
  tasks:
    - name: extract-repository-url
      taskRef:
        name: toolchain-extract-value
      params:
        - name: expression
          # if a params.repository is given, it takes precedence
          value: '. as $toolchain | ["$(params.repository)"] | if .[0]=="" then $toolchain | .services[] | select(.toolchain_binding.name=="repo") | .dashboard_url else .[0] end'
        - name: pipeline-debug
          value: $(params.pipeline-debug)  
    - name: git-clone
      taskRef:
        name: git-clone-repo
      params:
        - name: repository
          value: $(tasks.extract-repository-url.results.extracted-value)
        - name: branch
          value: $(params.branch)
        - name: revision
          value: $(params.revision)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: output
          workspace: pipeline-ws
    - name: pipeline-git-event-content-inspect
      runAfter:
        - git-clone
      taskRef:
        name: inspect-git-content
      workspaces:
        - name: workspace
          workspace: pipeline-ws


    # - name: extract-doi-enablement
    #   taskRef:
    #     name: toolchain-extract-value
    #   params:
    #     # count the number of service in the toolchain that are DevopsInsights
    #     - name: expression
    #       value: 'reduce .services[] as $service (0; if $service.service_id=="draservicebroker" then .+1 else . end)'
    #     - name: pipeline-debug
    #       value: $(params.pipeline-debug)
    # - name: publish-doi-buildrecord
    #   runAfter: [extract-doi-enablement]
    #   when:
    #     - input: $(tasks.extract-doi-enablement.results.extracted-value)
    #       operator: in
    #       values: ["1"]
    #   taskRef:
    #     name: doi-publish-buildrecord
    #   params:
    #     - name: toolchain-apikey-secret-key
    #       value: "toolchain-apikey"
    #     - name: app-name
    #       value: $(params.app-name)
    #     - name: git-repository
    #       value: $(tasks.git-clone.results.git-repository)
    #     - name: git-branch
    #       value: $(tasks.git-clone.results.git-branch)
    #     - name: git-commit
    #       value: $(tasks.git-clone.results.git-commit)
    - name: pipeline-build-task
      taskRef:
        name: build-task
      runAfter:
        - pipeline-git-event-content-inspect
      workspaces:
        - name: code
          workspace:  pipeline-ws 

    - name: pipeline-test-task
      taskRef:
        name: build-task
      runAfter:
        - pipeline-git-event-content-inspect
      workspaces:
        - name: code
          workspace:  pipeline-ws

    - name: pipeline-package-task
      taskRef:
         name: chaincode-package
      runAfter:
        - pipeline-test-task
      params:
        - name: label
          value: "demo"
        - name: type
          value: "node"
        - name: dir-to-package
          value: "."
      workspaces:
        - name: code
          workspace: pipeline-ws

    - name: pipeline-deploy-task
      taskRef:
         name: chaincode-install-approve
      params:
        - name: package-tar-file
          value: $(tasks.pipeline-package-task.results.filename-package)
      runAfter:
        - pipeline-package-task
      workspaces:
        - name: code
          workspace:  pipeline-ws

    # - name: publish-doi-code-tests
    #   runAfter: [unit-tests]
    #   when:
    #     - input: $(tasks.extract-doi-enablement.results.extracted-value)
    #       operator: in
    #       values: ["1"]
    #   taskRef:
    #     name: doi-publish-testrecord
    #   params:
    #     - name: toolchain-apikey-secret-key
    #       value: "toolchain-apikey"
    #     - name: build-number
    #       value: "$(tasks.publish-doi-buildrecord.results.build-number)"
    #     - name: app-name
    #       value: $(params.app-name)
    #     - name: file-locations
    #       value: "$(tasks.unit-tests.results.test-result-file-paths)"
    #     - name: test-types
    #       value: "$(tasks.unit-tests.results.test-types)"
    #     - name: pipeline-debug
    #       value: $(params.pipeline-debug)
    #   workspaces:
    #     - name: artifacts
    #       workspace: pipeline-ws
