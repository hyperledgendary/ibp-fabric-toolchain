---
# Build task to build the codebase
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: ibp-credentials
spec:
  params:
    - name: org_ibp_api_endpoint_id
    - name: org_ibp_api_authtype_id
    - name: org_ibp_api_key_id
    - name: org_ibp_api_secret_id
    - name: org_secret_manager_url
    - name: cloud_api_key
  workspaces:
    - name: code
      mountPath: /artifacts
  steps:
    - name: obtain-secrets
      image: ibmcom/pipeline-base-image:2.6
      workingDir: /artifacts
      command: ["/bin/bash", "-c"]
      env:
        - name: api_endpoint_id
          value: $(params.org_api_endpoint_id)
        - name: api_authtype_id
          value: $(params.org_api_authtype_id)
        - name: api_key_id
          value: $(params.org_api_key_id)
        - name: api_secret_id
          value: $(params.api_secret_id)
        - name: BASE_URL
          value: $(params.org_secret_manager_url)
      args:
        - |
          #!/bin/bash
          
          IAM_ACCESS_TOKEN=$(curl -s -X POST 'https://iam.cloud.ibm.com/identity/token' -H 'Content-Type: application/x-www-form-urlencoded' -d "grant_type=urn:ibm:params:oauth:grant-type:apikey&apikey=${CLOUD_API_KEY}" | jq -r '.access_token')

          function get_secret {
            id=$1
            curl -s -X GET "${BASE_URL}/v1/secrets/arbitrary/${id}"   -H "Authorization: Bearer ${IAM_ACCESS_TOKEN}"   -H "Accept: application/json" | jq -r '.resources[0].secret_data.payload'
          }

          mkidr ./ansible-config
          # Authentication to the IBP Endpoint
          jq -r -n \
              --arg ae "$(get_secret $api_endpoint_id)" \
              --arg aa "$(get_secret $api_authtype_id)" \
              --arg ak "$(get_secret $api_key_id)" \
              --arg ass "$(get_secret $api_secret_id)" \
              '{api_endpoint: $ae, api_authtype: $aa, api_key: $ak, api_secret: $ass}' > auth_vars.json

          # # Organization information
          # # id file or actual id?
          # ORG_JSON=$( jq -n \
          #             --arg op "$org_peer_name" \
          #             --arg oi "$org_admin_identity" \
          #             --arg om "$org_msp_name" \
          #             '{org_peer_name: $op, org_admin_identity: $oi, org_msp_name: $om}' )

          # # fabric cfg
          # # channel_name`
          # # "{{ smart_contract_name }}"
          # # version, sequence, endorsement_policy collections


